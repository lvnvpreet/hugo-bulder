version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: website-builder-db
    environment:
      POSTGRES_DB: ${DB_NAME:-website_builder}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - website-builder-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-website_builder}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Node.js + Express + TypeScript)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: website-builder-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3001}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-website_builder}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      AI_ENGINE_URL: http://ai-engine:8000
      HUGO_GENERATOR_URL: http://hugo-generator:3003
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - website-builder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Engine (Python + FastAPI + LangGraph)
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: website-builder-ai
    environment:
      PYTHONPATH: /app
      FASTAPI_ENV: ${NODE_ENV:-development}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2:-false}
      BACKEND_URL: http://backend:3001
    ports:
      - "${AI_ENGINE_PORT:-8000}:8000"
    volumes:
      - ./ai-engine:/app
      - ai_cache:/app/cache
    networks:
      - website-builder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hugo Generator (Node.js + TypeScript + Hugo CLI)
  hugo-generator:
    build:
      context: ./hugo-generator
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: website-builder-hugo
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${HUGO_GENERATOR_PORT:-3003}
      BACKEND_URL: http://backend:3001
      OUTPUT_PATH: /app/generated-sites
    ports:
      - "${HUGO_GENERATOR_PORT:-3003}:3003"
    volumes:
      - ./hugo-generator:/app
      - /app/node_modules
      - hugo_sites:/app/generated-sites
    networks:
      - website-builder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React + TypeScript + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: website-builder-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_URL: ${VITE_API_URL:-http://localhost/api}
      VITE_APP_TITLE: ${VITE_APP_TITLE:-Website Builder}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - website-builder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: website-builder-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
      - hugo_sites:/var/www/generated-sites:ro
    depends_on:
      - frontend
      - backend
      - ai-engine
      - hugo-generator
    networks:
      - website-builder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  ai_cache:
    driver: local
  hugo_sites:
    driver: local
  nginx_logs:
    driver: local

networks:
  website-builder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16