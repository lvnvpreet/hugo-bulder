

services:
  # Frontend Service (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: website-builder-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://localhost/api
      - VITE_NODE_ENV=production
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service (Node.js + Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: website-builder-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://website_builder:${POSTGRES_PASSWORD}@postgres:5432/website_builder
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
      - AI_ENGINE_URL=http://ai-engine:3002
      - HUGO_GENERATOR_URL=http://hugo-generator:3003
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - ai-engine
      - hugo-generator
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Engine Service (Python + FastAPI)
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
      target: production
    container_name: website-builder-ai-engine
    ports:
      - "3002:3002"
    environment:
      - PYTHONPATH=/app
      - OLLAMA_HOST=http://ollama:11434
      - DEFAULT_MODEL=llama3:8b
      - BACKUP_MODEL=mistral:7b
      - LOG_LEVEL=info
    volumes:
      - ai_engine_logs:/app/logs
      - ai_engine_models:/app/models
    depends_on:
      - ollama
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:3002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hugo Generator Service (Node.js)
  hugo-generator:
    build:
      context: ./hugo-generator
      dockerfile: Dockerfile
    container_name: website-builder-hugo-generator
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - HUGO_VERSION=0.119.0
    volumes:
      - hugo_output:/app/output
      - hugo_packages:/app/packages
      - hugo_temp:/app/temp
      - hugo_logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: website-builder-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=website_builder
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=website_builder
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U website_builder -d website_builder"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: website-builder-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: website-builder-ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: website-builder-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - hugo_packages:/var/www/packages:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  ai_engine_logs:
    driver: local
  ai_engine_models:
    driver: local
  hugo_output:
    driver: local
  hugo_packages:
    driver: local
  hugo_temp:
    driver: local
  hugo_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16