generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  password          String
  name              String?
  avatar            String?
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  refreshToken      String?
  plan              String        @default("free")
  projectsLimit     Int           @default(3)
  projectsUsed      Int           @default(0)
  lastLoginAt       DateTime?
  preferences       Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  uploads           AssetUpload[]
  projects          Project[]

  @@map("users")
}

model Project {
  id                 String             @id @default(cuid())
  userId             String
  name               String
  slug               String             @unique
  description        String?
  wizardData         Json
  currentStep        Int                @default(1)
  isCompleted        Boolean            @default(false)
  generationStatus   GenerationStatus   @default(DRAFT)
  lastGeneratedAt    DateTime?
  selectedTheme      String?
  themeCustomization Json?
  hugoSiteUrl        String?
  metaTitle          String?
  metaDescription    String?
  keywords           String[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  uploads            AssetUpload[]
  generatedContent   GeneratedContent[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  siteGenerations    SiteGeneration[]
  wizardSteps        WizardStep[]

  @@map("projects")
}

model WizardStep {
  id          String    @id @default(cuid())
  projectId   String
  stepNumber  Int
  stepName    String
  isCompleted Boolean   @default(false)
  stepData    Json
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, stepNumber])
  @@map("wizard_steps")
}

model BusinessCategory {
  id           String            @id @default(cuid())
  name         String            @unique
  displayName  String
  description  String?
  icon         String?
  industry     String?
  isActive     Boolean           @default(true)
  projectCount Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  services     ServiceTemplate[]

  @@map("business_categories")
}

model ServiceTemplate {
  id                 String           @id @default(cuid())
  businessCategoryId String
  name               String
  description        String
  features           String[]
  isPopular          Boolean          @default(false)
  sortOrder          Int              @default(0)
  contentKeywords    String[]
  defaultPricing     String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  businessCategory   BusinessCategory @relation(fields: [businessCategoryId], references: [id], onDelete: Cascade)

  @@map("service_templates")
}

model WebsiteStructure {
  id              String        @id @default(cuid())
  name            String        @unique
  displayName     String
  description     String?
  type            StructureType
  defaultSections String[]
  defaultPages    String[]
  suitableFor     String[]
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("website_structures")
}

model HugoTheme {
  id               String    @id @default(cuid())
  themeId          String    @unique
  name             String
  displayName      String
  description      String
  category         String
  githubUrl        String
  demoUrl          String?
  documentationUrl String?
  license          String    @default("MIT")
  version          String?
  lastUpdated      DateTime?
  suitableFor      String[]
  structureTypes   String[]
  features         String[]
  colorSchemes     Json?
  fontOptions      Json?
  configOptions    Json?
  downloadCount    Int       @default(0)
  popularityScore  Int       @default(0)
  isActive         Boolean   @default(true)
  isFeatured       Boolean   @default(false)
  screenshots      String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("hugo_themes")
}

model GeneratedContent {
  id          String   @id @default(cuid())
  projectId   String
  contentType String
  contentKey  String
  title       String?
  content     String
  metadata    Json?
  aiModel     String
  prompt      String?
  tokens      Int?
  version     Int      @default(1)
  isActive    Boolean  @default(true)
  wordCount   Int?
  readingTime Int?
  seoScore    Int?
  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, contentType, contentKey, version])
  @@map("generated_content")
}

model SiteGeneration {
  id               String               @id @default(cuid())
  projectId        String
  status           SiteGenerationStatus @default(PENDING)
  hugoTheme        String
  
  // NEW: Progress tracking fields
  progress         Int?                 @default(0)
  currentStep      String?              @default("Initializing...")
  customizations   Json?                // Store generation customizations
  contentOptions   Json?                // Store content generation options
  
  // Existing fields
  buildLog         String?
  errorLog         String?
  siteUrl          String?
  fileSize         Int?
  fileCount        Int?
  generationTime   Int?
  aiProcessingTime Int?
  hugoBuildTime    Int?
  hugoVersion      String?
  nodeVersion      String?
  startedAt        DateTime             @default(now())
  completedAt      DateTime?
  expiresAt        DateTime?
  project          Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("site_generations")
}

model AssetUpload {
  id           String    @id @default(cuid())
  userId       String
  projectId    String?
  filename     String
  originalName String
  mimeType     String
  fileSize     Int
  filePath     String
  assetType    AssetType
  usage        String?
  dimensions   Json?
  alt          String?
  caption      String?
  isProcessed  Boolean   @default(false)
  isActive     Boolean   @default(true)
  uploadedAt   DateTime  @default(now())
  project      Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("asset_uploads")
}

enum GenerationStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
  ARCHIVED
}

enum StructureType {
  SINGLE_PAGE
  MULTI_PAGE
}

enum SiteGenerationStatus {
  PENDING
  INITIALIZING
  BUILDING_STRUCTURE
  APPLYING_THEME
  GENERATING_CONTENT
  BUILDING_SITE
  PACKAGING
  COMPLETED
  FAILED
  EXPIRED
}

enum AssetType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}
